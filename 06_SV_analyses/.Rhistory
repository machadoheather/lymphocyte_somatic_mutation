NbycolonyDF_allanalyzed[is.na(NbycolonyDF_allanalyzed$N.VDJ),]$N.VDJ = 0
NbycolonyDF_allanalyzed[is.na(NbycolonyDF_allanalyzed$N.nonVDJ),]$N.nonVDJ = 0
NbycolonyDF_allanalyzed = data.frame(rbind(NbycolonyDF_allanalyzed, c(hsc_deletion$colony, 1, 0, 1, "HSC", "AX001", rep(0, times=8), "HSC" )))
subsets = unique(NbycolonyDF_allanalyzed$Cell.type2)
N=p.sv=p.sv.nonvdj=p.del=p.del.nonvdj=mean.per.genome.sv=mean.per.genome.sv.nonvdj=mean.per.genome.sv.vdj=vector()
for (i in 1:length(subsets)){
focal=subset(NbycolonyDF_allanalyzed, Cell.type2==subsets[i])
N[i] = nrow(focal)
p.sv[i] = mean(focal$N.SV>0)
p.sv.nonvdj[i] = mean(focal$N.nonVDJ>0)
mean.per.genome.sv[i] = mean(as.numeric(focal$N.SV))
mean.per.genome.sv.vdj[i] = mean(as.numeric(focal$N.VDJ))
mean.per.genome.sv.nonvdj[i] = mean(as.numeric(focal$N.nonVDJ))
}
focal=subset(NbycolonyDF_allanalyzed, Cell.type2!="HSC")
N[6] = nrow(focal)
p.sv[6] = mean(focal$N.SV>0)
p.sv.nonvdj[6] = mean(focal$N.nonVDJ>0)
mean.per.genome.sv[6] = mean(as.numeric(focal$N.SV))
mean.per.genome.sv.nonvdj[6] = mean(as.numeric(focal$N.nonVDJ))
mean.per.genome.sv.vdj[6] = mean(as.numeric(focal$N.VDJ))
summarySV = data.frame(Cell.type2=c(as.character(subsets),"lymph"), N, p.sv, p.sv.nonvdj,mean.per.genome.sv,mean.per.genome.sv.vdj,mean.per.genome.sv.nonvdj)
summarySV2 = summarySV[1:5,]
summarySV2$Cell.type2 = factor(summarySV2$Cell.type2, levels=c("HSC","Naive B","Memory B","Naive T","Memory T"))
summarySV2
fisher.test(matrix(c(summarySV[summarySV$Cell.type2=="HSC",]$N*summarySV[summarySV$Cell.type2=="HSC",]$p.sv.nonvdj,
summarySV[summarySV$Cell.type2=="HSC",]$N*(1-summarySV[summarySV$Cell.type2=="HSC",]$p.sv.nonvdj),
summarySV[summarySV$Cell.type2=="lymph",]$N*summarySV[summarySV$Cell.type2=="lymph",]$p.sv.nonvdj,
summarySV[summarySV$Cell.type2=="lymph",]$N*(1-summarySV[summarySV$Cell.type2=="lymph",]$p.sv.nonvdj)), ncol=2, byrow=TRUE ))$p.value  # 9.006286e-05
# number of each class of SV
table(brassfiltered_allanalyzed2$svclass)
# proportion of each SV
table(brassfiltered_allanalyzed2$svclass)/sum(table(brassfiltered_allanalyzed2$svclass))
# proportion of each non-VDJ SV
nonVDJ = subset(brassfiltered_allanalyzed2, VDJlocus==FALSE)
table(nonVDJ$svclass)/sum(table(nonVDJ$svclass))
brassfilteredTP = rbind(subset(brassfiltered, Correct != FALSE), hsc_deletion) #add the one hsc with a SV
brassfilteredTP$VDJlocus[brassfilteredTP$VDJlocus==""] = FALSE
brassfilteredTP$VDJlocusTF = TRUE
brassfilteredTP$VDJlocusTF[brassfilteredTP$VDJlocus==FALSE] = FALSE
brassfilteredTP$svclass2 = NA
brassfilteredTP$svclass2[brassfilteredTP$svclass %in% c("ascat_gain","ascat_partial_gain","ascat_partial_loss","ascat_uniparental_disomy")] = "gain/loss"
brassfilteredTP$svclass2[brassfilteredTP$svclass %in% c("bridge_of_templated_insertions","Cycle_templated_insertions","local_3_jump","chromoplexy")] = "other"
brassfilteredTP$svclass2[brassfilteredTP$svclass %in% c("deletion")] = "deletion"
brassfilteredTP$svclass2[brassfilteredTP$svclass %in% c("foldback_inversion", "inversion", "reciprocal_inversion")] = "inversion"
brassfilteredTP$svclass2[brassfilteredTP$svclass %in% c("tandem-duplication")] = "tandem-dup"
brassfilteredTP$sv
class2[brassfilteredTP$svclass %in% c("reciprocal_translocation","translocation","unbalanced_translocation")] = "translocation"
brassfilteredTP$svclass2[brassfilteredTP$svclass %in% c("reciprocal_translocation","translocation","unbalanced_translocation")] = "translocation"
sig_prop_type_focal = subset(sig_prop_type2, Cell.type2 %in% c("HSC","Naive B","Memory B","Naive T","Memory T") )
sig_prop_type_focal2 = rbind(sig_prop_type_focal, unlist(c(hsc_deletion[,c("colony",   "meandp", "Donor",   "CellType", "Cell.type2", "Tissue")], rep(0, times=16) )) )
mycolonies = sig_prop_type_focal2$colony # include HSC deletion
myclasses = unique(brassfilteredTP$svclass2)
npercolonyVDJ = npercolonynonVDJ = npercolony = matrix(nrow=length(mycolonies), ncol=length(myclasses))
for (colony in 1:length(mycolonies)){
for (class in 1:length(myclasses)){
mysum1 = sum(brassfilteredTP$colony==mycolonies[colony] & brassfilteredTP$svclass2==myclasses[class] & brassfilteredTP$VDJlocusTF==TRUE)
npercolonyVDJ[colony, class] = mysum1
mysum2 = sum(brassfilteredTP$colony==mycolonies[colony] & brassfilteredTP$svclass2==myclasses[class] & brassfilteredTP$VDJlocusTF==FALSE)
npercolonynonVDJ[colony, class] = mysum2
mysum3 = sum(brassfilteredTP$colony==mycolonies[colony] & brassfilteredTP$svclass2==myclasses[class])
npercolony[colony, class] = mysum3
}
}
mylist = list(npercolonyVDJ, npercolonynonVDJ, npercolony)
outlist = list()
for (i in 1:3){
focal = mylist[[i]]
focal[is.na(mylist[[i]])] = 0
outlist2 = list()
for (j in 1:6){
outlist2[[j]] = tapply(focal[,j], INDEX=sig_prop_type_focal2$Cell.type2, FUN=mean)
}
df1 = data.frame(do.call(cbind, outlist2))
colnames(df1) = myclasses
outlist[[i]] = df1
}
myvdj = data.frame(outlist[[1]])
myvdj$dataset = "Ig/TCR"
mynonvdj = data.frame(outlist[[2]])
mynonvdj$dataset = "non-Ig/TCR"
mytotal = data.frame(outlist[[3]])
mytotal$dataset = "total"
myboth = rbind(myvdj, mynonvdj)
myboth$celltype = c("Memory B", "Naive B", "HSC", "Memory T", "Naive T","Memory B", "Naive B", "HSC", "Memory T", "Naive T")
myboth$celltype = factor(myboth$celltype, levels=c("HSC","Naive B", "Memory B", "Naive T",  "Memory T"))
myboth$dataset = factor(myboth$dataset, levels=c("Ig/TCR","non-Ig/TCR"))
mybothmelt = melt(myboth, id.vars=c("dataset" , "celltype"))
mybothmelt$variable = factor(mybothmelt$variable, levels=c("deletion", "inversion", "tandem.dup", "translocation",  "gain.loss","other") )
ggplot(mybothmelt, aes(variable, value, fill=dataset))+
geom_bar(stat="identity", width=0.8)+
facet_wrap(.~celltype, nrow=1)+
#scale_fill_manual("",values=c("#1b9e77","#e7298a"))+
#scale_fill_manual("",values=c("#de77ae","#1b9e77"))+
scale_fill_manual("",values=c("#df65b0","#005a32"))+
theme_bw()+
scale_y_continuous(expand = expand_scale(mult=c(0,0.05)) )+
xlab("")+
ylab("Mean SV per genome")+
#theme(strip.text = element_text(hjust = 0, size=10, face="bold"),
theme(strip.text = element_text(hjust = 0, size=10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
panel.border = element_rect(colour = "black"),
axis.text=element_text(size=8),
axis.title=element_text(size=10),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
legend.text=element_text(size=8),
legend.key.size = unit(0.35, 'cm'))
#ggsave("N_sv_by_celltype_VDJ_SVtype.pdf", width=8.6,height=2.5)
NbycolonyDF_allanalyzed_nonHSC = NbycolonyDF_allanalyzed[NbycolonyDF_allanalyzed$Cell.type2!="HSC",]
summary(lm(Nmut_adj_as_new~N.SV,data=NbycolonyDF_allanalyzed_nonHSC))
head(NbycolonyDF_allanalyzed_nonHSC)
head(sig_prop_type_focal2 )
head(NbycolonyDF_allanalyzed )
head(sig_prop_type)
head(sig_prop_type2)
NbycolonyDF_allanalyzed = merge(Nbycolony, subset(sig_prop_type2, Cell.type2 %in% c("HSC","Naive T","Memory T","Naive B","Memory B")), by.x="colony", by.y= "samp_names", all.y=TRUE) # 780  30
head(sig_prop_type2)
head(Nbycolony)
NbycolonyDF_allanalyzed = merge(Nbycolony, subset(sig_prop_type2, Cell.type2 %in% c("HSC","Naive T","Memory T","Naive B","Memory B")), by="colony", all.y=TRUE) # 780  30
NbycolonyDF_allanalyzed[is.na(NbycolonyDF_allanalyzed$N.SV),]$N.SV = 0
NbycolonyDF_allanalyzed[is.na(NbycolonyDF_allanalyzed$N.VDJ),]$N.VDJ = 0
NbycolonyDF_allanalyzed[is.na(NbycolonyDF_allanalyzed$N.nonVDJ),]$N.nonVDJ = 0
NbycolonyDF_allanalyzed = data.frame(rbind(NbycolonyDF_allanalyzed, c(hsc_deletion$colony, 1, 0, 1, "HSC", "AX001", rep(0, times=8), "HSC" )))
head(NbycolonyDF_allanalyzed)
subsets = unique(NbycolonyDF_allanalyzed$Cell.type2)
N=p.sv=p.sv.nonvdj=p.del=p.del.nonvdj=mean.per.genome.sv=mean.per.genome.sv.nonvdj=mean.per.genome.sv.vdj=vector()
for (i in 1:length(subsets)){
focal=subset(NbycolonyDF_allanalyzed, Cell.type2==subsets[i])
N[i] = nrow(focal)
p.sv[i] = mean(focal$N.SV>0)
p.sv.nonvdj[i] = mean(focal$N.nonVDJ>0)
mean.per.genome.sv[i] = mean(as.numeric(focal$N.SV))
mean.per.genome.sv.vdj[i] = mean(as.numeric(focal$N.VDJ))
mean.per.genome.sv.nonvdj[i] = mean(as.numeric(focal$N.nonVDJ))
}
focal=subset(NbycolonyDF_allanalyzed, Cell.type2!="HSC")
N[6] = nrow(focal)
p.sv[6] = mean(focal$N.SV>0)
p.sv.nonvdj[6] = mean(focal$N.nonVDJ>0)
mean.per.genome.sv[6] = mean(as.numeric(focal$N.SV))
mean.per.genome.sv.nonvdj[6] = mean(as.numeric(focal$N.nonVDJ))
mean.per.genome.sv.vdj[6] = mean(as.numeric(focal$N.VDJ))
summarySV = data.frame(Cell.type2=c(as.character(subsets),"lymph"), N, p.sv, p.sv.nonvdj,mean.per.genome.sv,mean.per.genome.sv.vdj,mean.per.genome.sv.nonvdj)
subsets
NbycolonyDF_allanalyzed = merge(Nbycolony, subset(sig_prop_type2, Cell.type2 %in% c("HSC","Naive T","Memory T","Naive B","Memory B")), by="colony", all.y=TRUE) # 780  30
head(NbycolonyDF_allanalyzed)
dim(NbycolonyDF_allanalyzed)
hsc_deletion
head(Nbycolony)
head(sig_prop_type2)
dim(sig_prop_type2)
table(NbycolonyDF$Cell.type2)
NbycolonyDF_allanalyzed = merge(Nbycolony, subset(sig_prop_type2, Cell.type2 %in% c("HSC","Naive T","Memory T","Naive B","Memory B")), by="colony", all.y=TRUE) # 780  30
NbycolonyDF_allanalyzed[is.na(NbycolonyDF_allanalyzed$N.SV),]$N.SV = 0
NbycolonyDF_allanalyzed[is.na(NbycolonyDF_allanalyzed$N.VDJ),]$N.VDJ = 0
NbycolonyDF_allanalyzed[is.na(NbycolonyDF_allanalyzed$N.nonVDJ),]$N.nonVDJ = 0
#NbycolonyDF_allanalyzed = data.frame(rbind(NbycolonyDF_allanalyzed, c(hsc_deletion$colony, 1, 0, 1, NA,  "AX001", "HSC", "HSC", NA, rep(0, times=8), "HSC" )))
subsets = unique(NbycolonyDF_allanalyzed$Cell.type2)
N=p.sv=p.sv.nonvdj=p.del=p.del.nonvdj=mean.per.genome.sv=mean.per.genome.sv.nonvdj=mean.per.genome.sv.vdj=vector()
for (i in 1:length(subsets)){
focal=subset(NbycolonyDF_allanalyzed, Cell.type2==subsets[i])
N[i] = nrow(focal)
p.sv[i] = mean(focal$N.SV>0)
p.sv.nonvdj[i] = mean(focal$N.nonVDJ>0)
mean.per.genome.sv[i] = mean(as.numeric(focal$N.SV))
mean.per.genome.sv.vdj[i] = mean(as.numeric(focal$N.VDJ))
mean.per.genome.sv.nonvdj[i] = mean(as.numeric(focal$N.nonVDJ))
}
focal=subset(NbycolonyDF_allanalyzed, Cell.type2!="HSC")
N[6] = nrow(focal)
p.sv[6] = mean(focal$N.SV>0)
p.sv.nonvdj[6] = mean(focal$N.nonVDJ>0)
mean.per.genome.sv[6] = mean(as.numeric(focal$N.SV))
mean.per.genome.sv.nonvdj[6] = mean(as.numeric(focal$N.nonVDJ))
mean.per.genome.sv.vdj[6] = mean(as.numeric(focal$N.VDJ))
summarySV = data.frame(Cell.type2=c(as.character(subsets),"lymph"), N, p.sv, p.sv.nonvdj,mean.per.genome.sv,mean.per.genome.sv.vdj,mean.per.genome.sv.nonvdj)
summarySV2 = summarySV[1:5,]
summarySV2$Cell.type2 = factor(summarySV2$Cell.type2, levels=c("HSC","Naive B","Memory B","Naive T","Memory T"))
summarySV2
fisher.test(matrix(c(summarySV[summarySV$Cell.type2=="HSC",]$N*summarySV[summarySV$Cell.type2=="HSC",]$p.sv.nonvdj,
summarySV[summarySV$Cell.type2=="HSC",]$N*(1-summarySV[summarySV$Cell.type2=="HSC",]$p.sv.nonvdj),
summarySV[summarySV$Cell.type2=="lymph",]$N*summarySV[summarySV$Cell.type2=="lymph",]$p.sv.nonvdj,
summarySV[summarySV$Cell.type2=="lymph",]$N*(1-summarySV[summarySV$Cell.type2=="lymph",]$p.sv.nonvdj)), ncol=2, byrow=TRUE ))$p.value  # 9.006286e-05
brassfilteredTP = rbind(subset(brassfiltered, Correct != FALSE), hsc_deletion) #add the one hsc with a SV
brassfilteredTP$VDJlocus[brassfilteredTP$VDJlocus==""] = FALSE
brassfilteredTP$VDJlocusTF = TRUE
brassfilteredTP$VDJlocusTF[brassfilteredTP$VDJlocus==FALSE] = FALSE
brassfilteredTP$svclass2 = NA
brassfilteredTP$svclass2[brassfilteredTP$svclass %in% c("ascat_gain","ascat_partial_gain","ascat_partial_loss","ascat_uniparental_disomy")] = "gain/loss"
brassfilteredTP$svclass2[brassfilteredTP$svclass %in% c("bridge_of_templated_insertions","Cycle_templated_insertions","local_3_jump","chromoplexy")] = "other"
brassfilteredTP$svclass2[brassfilteredTP$svclass %in% c("deletion")] = "deletion"
brassfilteredTP$svclass2[brassfilteredTP$svclass %in% c("foldback_inversion", "inversion", "reciprocal_inversion")] = "inversion"
brassfilteredTP$svclass2[brassfilteredTP$svclass %in% c("tandem-duplication")] = "tandem-dup"
brassfilteredTP$svclass2[brassfilteredTP$svclass %in% c("reciprocal_translocation","translocation","unbalanced_translocation")] = "translocation"
sig_prop_type_focal = subset(sig_prop_type2, Cell.type2 %in% c("HSC","Naive B","Memory B","Naive T","Memory T") )
sig_prop_type_focal2 = rbind(sig_prop_type_focal, unlist(c(hsc_deletion[,c("colony",   "meandp", "Donor",   "CellType", "Cell.type2", "Tissue")], rep(0, times=16) )) )
mycolonies = sig_prop_type_focal2$colony # include HSC deletion
myclasses = unique(brassfilteredTP$svclass2)
npercolonyVDJ = npercolonynonVDJ = npercolony = matrix(nrow=length(mycolonies), ncol=length(myclasses))
for (colony in 1:length(mycolonies)){
for (class in 1:length(myclasses)){
mysum1 = sum(brassfilteredTP$colony==mycolonies[colony] & brassfilteredTP$svclass2==myclasses[class] & brassfilteredTP$VDJlocusTF==TRUE)
npercolonyVDJ[colony, class] = mysum1
mysum2 = sum(brassfilteredTP$colony==mycolonies[colony] & brassfilteredTP$svclass2==myclasses[class] & brassfilteredTP$VDJlocusTF==FALSE)
npercolonynonVDJ[colony, class] = mysum2
mysum3 = sum(brassfilteredTP$colony==mycolonies[colony] & brassfilteredTP$svclass2==myclasses[class])
npercolony[colony, class] = mysum3
}
}
head(sig_prop_type_focal)
dim(sig_prop_type_focal)
dim(sig_prop_type_focal)
sig_prop_type_focal2 = rbind(sig_prop_type_focal, unlist(c(hsc_deletion[,c("colony",   "meandp", "Donor",   "CellType", "Cell.type2", "Tissue")], rep(0, times=16) )) )
tail(sig_prop_type_focal2)
subset(sig_prop_type2, colony=="PD43974ay")
dim(sig_prop_type_focal)
head(sig_prop_type_focal)
sig_prop_type_focal2 = rbind(sig_prop_type_focal, unlist(c(hsc_deletion[,c("colony",   "meandp", "Donor",   "CellType", "Cell.type2", "Tissue")], rep(0, times=16) )) )
mycolonies = sig_prop_type_focal2$colony # include HSC deletion
myclasses = unique(brassfilteredTP$svclass2)
npercolonyVDJ = npercolonynonVDJ = npercolony = matrix(nrow=length(mycolonies), ncol=length(myclasses))
for (colony in 1:length(mycolonies)){
for (class in 1:length(myclasses)){
mysum1 = sum(brassfilteredTP$colony==mycolonies[colony] & brassfilteredTP$svclass2==myclasses[class] & brassfilteredTP$VDJlocusTF==TRUE)
npercolonyVDJ[colony, class] = mysum1
mysum2 = sum(brassfilteredTP$colony==mycolonies[colony] & brassfilteredTP$svclass2==myclasses[class] & brassfilteredTP$VDJlocusTF==FALSE)
npercolonynonVDJ[colony, class] = mysum2
mysum3 = sum(brassfilteredTP$colony==mycolonies[colony] & brassfilteredTP$svclass2==myclasses[class])
npercolony[colony, class] = mysum3
}
}
mylist = list(npercolonyVDJ, npercolonynonVDJ, npercolony)
outlist = list()
for (i in 1:3){
focal = mylist[[i]]
focal[is.na(mylist[[i]])] = 0
outlist2 = list()
for (j in 1:6){
outlist2[[j]] = tapply(focal[,j], INDEX=sig_prop_type_focal2$Cell.type2, FUN=mean)
}
df1 = data.frame(do.call(cbind, outlist2))
colnames(df1) = myclasses
outlist[[i]] = df1
}
myvdj = data.frame(outlist[[1]])
myvdj$dataset = "Ig/TCR"
mynonvdj = data.frame(outlist[[2]])
mynonvdj$dataset = "non-Ig/TCR"
mytotal = data.frame(outlist[[3]])
mytotal$dataset = "total"
myboth = rbind(myvdj, mynonvdj)
myboth$celltype = c("Memory B", "Naive B", "HSC", "Memory T", "Naive T","Memory B", "Naive B", "HSC", "Memory T", "Naive T")
myboth$celltype = factor(myboth$celltype, levels=c("HSC","Naive B", "Memory B", "Naive T",  "Memory T"))
myboth$dataset = factor(myboth$dataset, levels=c("Ig/TCR","non-Ig/TCR"))
mybothmelt = melt(myboth, id.vars=c("dataset" , "celltype"))
mybothmelt$variable = factor(mybothmelt$variable, levels=c("deletion", "inversion", "tandem.dup", "translocation",  "gain.loss","other") )
ggplot(mybothmelt, aes(variable, value, fill=dataset))+
geom_bar(stat="identity", width=0.8)+
facet_wrap(.~celltype, nrow=1)+
scale_fill_manual("",values=c("#df65b0","#005a32"))+
theme_bw()+
scale_y_continuous(expand = expand_scale(mult=c(0,0.05)) )+
xlab("")+
ylab("Mean SV per genome")+
theme(strip.text = element_text(hjust = 0, size=10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
panel.border = element_rect(colour = "black"),
axis.text=element_text(size=8),
axis.title=element_text(size=10),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
legend.text=element_text(size=8),
legend.key.size = unit(0.35, 'cm'))
NbycolonyDF_allanalyzed_nonHSC = NbycolonyDF_allanalyzed[NbycolonyDF_allanalyzed$Cell.type2!="HSC",]
summary(lm(Nmut_adj_as_new~N.SV,data=NbycolonyDF_allanalyzed_nonHSC))
summary(lm(Nmut_hsc_as~N.SV,data=NbycolonyDF_allanalyzed_nonHSC))
summary(lm(Nmut_hsc_as~N.VDJ,data=NbycolonyDF_allanalyzed_nonHSC))
summary(lm(Nmut_hsc_as~N.nonVDJ,data=NbycolonyDF_allanalyzed_nonHSC))
head(NbycolonyDF_allanalyzed_nonHSC)
dim(NbycolonyDF_allanalyzed_nonHSC)
subsets
subsets2 = subsets[c(1,2,4,5)]
pval.sig = matrix(ncol=4, nrow=7)
r2.sig = matrix(ncol=4, nrow=7)
coef.sig = matrix(ncol=4, nrow=7)
colnames(pval.sig) = subsets2
rownames(pval.sig) = colnames(NbycolonyDF_allanalyzed_nonHSC)[18:24]
colnames(r2.sig) = subsets2
rownames(r2.sig) = colnames(NbycolonyDF_allanalyzed_nonHSC)[18:24]
colnames(coef.sig) = subsets2
rownames(coef.sig) = colnames(NbycolonyDF_allanalyzed_nonHSC)[18:24]
for (i in 1:4){
focal = subset(NbycolonyDF_allanalyzed_nonHSC, Cell.type2==subsets2[i])
for (j in 1:7){
pval.sig[j,i] = summary(lm(focal[,17+j]~focal$N.nonVDJ) )$coefficients[2,4]
r2.sig[j,i] = summary(lm(focal[,17+j]~focal$N.nonVDJ) )$adj.r.squared
coef.sig[j,i] = summary(lm(focal[,17+j]~focal$N.nonVDJ) )$coefficients[2,1]
}
}
# T memory and S7
ggplot(subset(NbycolonyDF_allanalyzed, Cell.type2=="T Memory"), aes(S7, N.nonVDJ))+
geom_point()
# T memory and S7
ggplot(subset(NbycolonyDF_allanalyzed, Cell.type2=="T Memory"), aes(SBS7a, N.nonVDJ))+
geom_point()
# T memory and S7
ggplot(subset(NbycolonyDF_allanalyzed, Cell.type2=="Memory T"), aes(SBS7a, N.nonVDJ))+
geom_point()
# check for duplicates:
brassfilteredTP$ID = paste(brassfilteredTP$chr1, brassfilteredTP$start1, brassfilteredTP$start2, sep="_")
brassfilteredTP$IDsample = paste(brassfilteredTP$chr1, brassfilteredTP$start1, brassfilteredTP$start2, brassfilteredTP$sample, sep="_")
mydups = brassfilteredTP[duplicated(brassfilteredTP$ID),]
uniquedups = unique(mydups$ID)
i=1
brassfilteredTP[brassfilteredTP$ID == uniquedups[i], ]
# shared ancestrally or not double counting reciprocal inversions
# also removed ascat identified loss/gains
IDsample2remove = c("12_55681021_55985338_PD40521sp", "2_57857473_57861064_PD40521th","5_131058177_142403966_PD40667uo","5_131058177_142403966_PD40667uo","11_63923769_64542126_PD43974az", "11_63923769_64542126_PD43974bf","11_63923769_64542126_PD43974bn","11_63923769_64542126_PD43974cp","7_38295993_38369948_T3_B5","14_22466407_22964894_PD40521tj","2_NA_NA_PD40521vj","2_NA_NA_PD40521tz","2_NA_NA_PD40521te")
brassfilteredTPnodup = brassfilteredTP[!(brassfilteredTP$IDsample %in% IDsample2remove), ]
brassfilteredTPnodupFinal = subset(brassfilteredTPnodup, sample %in% m3final$colony)
m3final = subset(m3, Cell.type2 %in% c("HSC","T Memory","B Memory","T Naive","B Naive","Treg")) #717
m3final = subset(m3, Cell.type2 %in% c("HSC","Memory T","Memory B","Naive T","Naive B","Treg")) #717
brassfilteredTPnodupFinal = subset(brassfilteredTPnodup, sample %in% m3final$colony)
brassfilteredTPFinalNonASCAT = brassfilteredTPFinal[grep(brassfilteredTPFinal$svclass, invert=T, pattern="ascat"), ]
brassfilteredTPnodup = brassfilteredTP[!(brassfilteredTP$IDsample %in% IDsample2remove), ]
brassfilteredTPnodupFinal = subset(brassfilteredTPnodup, sample %in% m3final$colony)
brassfilteredTPFinal = subset(brassfilteredTP, sample %in% m3final$colony)
brassfilteredTPFinalNonASCAT = brassfilteredTPFinal[grep(brassfilteredTPFinal$svclass, invert=T, pattern="ascat"), ]
brassfilteredTP_allcolonies = merge(m3final, brassfilteredTPFinalNonASCAT, by.x="colony",by.y="sample", all.x=TRUE)
SVperColony = brassfilteredTP_allcolonies %>%
group_by(colony) %>%
summarise(nSV = sum(!(is.na(chr1))) ,
n_nonSV = sum(is.na(chr1)),
n_nonVDJ_SV = sum(!(is.na(chr1)) & VDJlocus==FALSE))
SVperColonyInfo = merge(SVperColony, m3final, by="colony")
head(m3$final)
head(m3final)
head(SVperColony)
detach("package:plyr", unload=TRUE)
SVperColony = brassfilteredTP_allcolonies %>%
group_by(colony) %>%
summarise(nSV = sum(!(is.na(chr1))) ,
n_nonSV = sum(is.na(chr1)),
n_nonVDJ_SV = sum(!(is.na(chr1)) & VDJlocus==FALSE))
SVperColony
SVperColonyInfo = merge(SVperColony, m3final, by="colony")
t.test(x=subset(SVperColonyInfo, Cell.type2=="HSC")$nSV, y=subset(SVperColonyInfo, Cell.type2!="HSC")$nSV)
# proportion of SVs that are deletions
brassfilteredTPnodupNonASCAT = brassfilteredTPnodupFinal[grep(brassfilteredTPnodupFinal$svclass, invert=T, pattern="ascat"), ]
#write.table(brassfilteredTPnodupNonASCAT, file="brassfilteredTPnodupNonASCAT_July2020.txt", quote=F, sep="\t", col.names = T, row.names = F)
brassfilteredTPFinalNonASCAT = brassfilteredTPFinal[grep(brassfilteredTPFinal$svclass, invert=T, pattern="ascat"), ]
table(brassfilteredTPFinal$svclass)
# proportion of SVs that are non-VDJ
mean(brassfilteredTPFinalNonASCAT$VDJlocus != FALSE) # 85%
# proportion of colonies (lymphocyte) with a non VDJ SV
mean(subset(SVperColonyInfo, Cell.type2!="HSC")$n_nonVDJ_SV > 0)
mean(subset(SVperColonyInfo, Cell.type2!="HSC")$nSV > 0)
# SV's naive vs memory
t.test(x=subset(SVperColonyInfo, Cell.type2 %in% c("T Naive ","B Naive") )$n_nonVDJ_SV>0, y=subset(SVperColonyInfo, Cell.type2 %in% c("T Memory","B Memory") )$n_nonVDJ_SV>0)
# SV's naive vs memory
t.test(x=subset(SVperColonyInfo, Cell.type2 %in% c("Naive T","Naive B") )$n_nonVDJ_SV>0, y=subset(SVperColonyInfo, Cell.type2 %in% c("Memory T","Memory B") )$n_nonVDJ_SV>0)
SVperColonyInfo %>%
group_by(Cell.type2) %>%
summarise(mean.nonvdj.min1 = mean(n_nonVDJ_SV>0))
mean(subset(SVperColonyInfo, Cell.type2 %in% c("T Naive","B Naive") )$n_nonVDJ_SV>0)
mean(subset(SVperColonyInfo, Cell.type2 %in% c("Naive T","Naive B") )$n_nonVDJ_SV>0)
mean(subset(SVperColonyInfo, Cell.type2 %in% c("Memory T","Memory B") )$n_nonVDJ_SV>0)
telo = read.table("../data/colonyinfo_telo_AX001_KX001_KX002_KX003_TX001_TX002_CB001.txt", header=TRUE, stringsAsFactors = F, sep="\t")
telo = read.table("../02_mutation_burden_analysis/colonyinfo_telo_AX001_KX001_KX002_KX003_TX001_TX002_CB001.txt", header=TRUE, stringsAsFactors = F, sep="\t")
SVperColonyInfo_telo = merge(SVperColonyInfo, telo[,c("colony","Telomere")], by="colony")
SVperColonyInfo_telo$nonVDJ_SV_TF = 0
SVperColonyInfo_telo$nonVDJ_SV_TF[SVperColonyInfo_telo$n_nonVDJ_SV>0] = 1
# no correlation between telomere length and non-vdj SV #
summary(lm(n_nonVDJ_SV~Telomere*Cell.type2, data=subset(SVperColonyInfo_telo, Cell.type2 != "HSC" )))
summary(glm(nonVDJ_SV_TF~Telomere*Age, family=binomial, data=subset(SVperColonyInfo_telo, (Cell.type2 == "T Memory" | Cell.type2 == "T Naive" ) & Age != 0 & Age !=4 )))
SVperColonyInfo_telo = merge(SVperColonyInfo, telo[,c("colony","Telomere")], by="colony")
SVperColonyInfo_telo$nonVDJ_SV_TF = 0
SVperColonyInfo_telo$nonVDJ_SV_TF[SVperColonyInfo_telo$n_nonVDJ_SV>0] = 1
# no correlation between telomere length and non-vdj SV #
summary(lm(n_nonVDJ_SV~Telomere*Cell.type2, data=subset(SVperColonyInfo_telo, Cell.type2 != "HSC" )))
summary(glm(nonVDJ_SV_TF~Telomere*Age, family=binomial, data=subset(SVperColonyInfo_telo, (Cell.type2 == "Memory T" | Cell.type2 == "Naive T" ) & Age != 0 & Age !=4 )))
summary(glm(nonVDJ_SV_TF~Nmut_adj_as*Donor, family=binomial, data=subset(SVperColonyInfo_telo, (Cell.type2 == "Memory T" | Cell.type2 == "Naive T" ) & Age != 0 & Age !=4 )))
subset(SVperColonyInfo_telo, (Cell.type2 == "Memory T" | Cell.type2 == "Naive T" ) & Age != 0 & Age !=4 )
subset(SVperColonyInfo_telo, (Cell.type2 == "Memory T" | Cell.type2 == "Naive T" ) & Age != 0 & Age !=4 )
t.test(x=subset(SVperColonyInfo_telo, Cell.type2 == "Memory T" & Donor=="KX001" & n_nonVDJ_SV==0)$Nmut_adj_as,
y=subset(SVperColonyInfo_telo, Cell.type2 == "Memory T" & Donor=="KX001" & n_nonVDJ_SV>0)$Nmut_adj_as)
t.test(x=subset(SVperColonyInfo_telo, Cell.type2 == "Memory T" & Donor=="KX002" & n_nonVDJ_SV==0)$Nmut_adj_as,
y=subset(SVperColonyInfo_telo, Cell.type2 == "Memory T" & Donor=="KX002" & n_nonVDJ_SV>0)$Nmut_adj_as)
t.test(x=subset(SVperColonyInfo_telo, Cell.type2 == "Memory T" & Donor=="ARG" & n_nonVDJ_SV==0)$Nmut_adj_as,
y=subset(SVperColonyInfo_telo, Cell.type2 == "Memory T" & Donor=="ARG" & n_nonVDJ_SV>0)$Nmut_adj_as)
summary(glm(nonVDJ_SV_TF~Nmut_hsc_as+Age, family=binomial, data=subset(SVperColonyInfo_telo, (Cell.type2 == "Memory T" | Cell.type2 == "Naive T" | Cell.type2 == "Treg") )))
summary(glm(nonVDJ_SV_TF~Age, family=binomial, data=subset(SVperColonyInfo_telo, (Cell.type2 == "Memory T" | Cell.type2 == "Naive T" | Cell.type2 == "Treg") )))
ggplot(data=subset(SVperColonyInfo_telo, Cell.type2 != "HSC" ), aes(n_nonVDJ_SV,Nmut_hsc_as) )+
geom_point()+
geom_smooth(method = "lm")+
facet_wrap(.~Cell.type2, scales="free")
ggplot(data=subset(SVperColonyInfo_telo, Cell.type2 %in% c("Memory T","Naive T")), aes(nonVDJ_SV_TF,Nmut_hsc_as) )+
geom_point()+
geom_smooth(method = "lm")+
facet_grid(Donor~Cell.type2, scales="free")
SVperColonyInfo = read.table(file="SVperColonyInfo", header=T, stringsAsFactors = F, sep="\t")
head(SVperColonyInfo)
summary(lm(n_nonVDJ_SV~Age , data=subset(SVperColonyInfo, Cell.type2 %in% c("Memory B","Memory T"))))
summary(lm(n_nonVDJ_SV~Age*Cell.type2 , data=SVperColonyInfo))
subset(SVperColonyInfo, Cell.type2 %in% c("Memory B","Memory T", "Naive B", "Naive T")) %>%
group_by(Age, Cell.type2) %>%
summarise(mean = mean(n_nonVDJ_SV))
SVperColonyInfo_means = subset(SVperColonyInfo, Cell.type2 %in% c("Memory B","Memory T", "Naive B", "Naive T")) %>%
group_by(Age, Cell.type2) %>%
summarise(mean = mean(n_nonVDJ_SV))
ggplot(subset(SVperColonyInfo_meanso, Cell.type2 %in% c("Memory B","Memory T", "Naive B", "Naive T")) )+
geom_boxplot(aes(y=n_nonVDJ_SV, group=Age))
ggplot(subset(SVperColonyInfo_means, Cell.type2 %in% c("Memory B","Memory T", "Naive B", "Naive T") ) )+
geom_boxplot(aes(y=n_nonVDJ_SV, group=Age))
SVperColonyInfo_means
ggplot(SVperColonyInfo_means, aes(y=n_nonVDJ_SV, group=Age) )+
geom_point()+
facet_wrap(.~Cell.type2)
ggplot(SVperColonyInfo_means, aes(y=mean, group=Age) )+
geom_point()+
facet_wrap(.~Cell.type2)
ggplot(SVperColonyInfo_means, aes(y=mean, x=Age) )+
geom_point()+
facet_wrap(.~Cell.type2)
ggplot(SVperColonyInfo, aes(y=mean, x=Age) )+
geom_boxplot()+
facet_wrap(.~Cell.type2)
head(SVperColonyInfo)
ggplot(SVperColonyInfo, aes(y=n_nonVDJ_SV, x=Age) )+
geom_boxplot()+
facet_wrap(.~Cell.type2)
ggplot(SVperColonyInfo, aes(y=n_nonVDJ_SV, x=Age, group=Age) )+
geom_boxplot()+
facet_wrap(.~Cell.type2)
ggplot(SVperColonyInfo_means, aes(y=mean, x=Age) )+
geom_point()+
facet_wrap(.~Cell.type2)
ggplot(subset(SVperColonyInfo, Cell.type2 %in% c("Memory B","Memory T", "Naive B", "Naive T")) )+
geom_boxplot(aes(y=n_nonVDJ_SV, group=Age))
summary(lm(n_nonVDJ_SV~Age , data=subset(SVperColonyInfo, Cell.type2 %in% c("Memory B","Memory T"))))
summary(lm(n_nonVDJ_SV~Age*Cell.type2 , data=SVperColonyInfo))
SVperColonyInfo_means = subset(SVperColonyInfo, Cell.type2 %in% c("Memory B","Memory T", "Naive B", "Naive T")) %>%
group_by(Age, Cell.type2) %>%
summarise(mean = mean(n_nonVDJ_SV))
ggplot(SVperColonyInfo_means, aes(y=mean, x=Age) )+
geom_point()+
facet_wrap(.~Cell.type2)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(cache=TRUE, fig.path="./graphics/plot",autodep=TRUE,fig.width=6, fig.height=3)
knitr::opts_knit$set(root.dir = '/Users/hm8/sanger/lymphocyteExpansionSequenceAnalysis/scripts/scripts_April2021/06_SV_analyses')
library(ggplot2)
library(reshape2)
library(data.table)
library(plyr)
library(dplyr)
## Read in curated SV file (also has ASCAT results)
```{r warning=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(cache=TRUE, fig.path="./graphics/plot",autodep=TRUE,fig.width=6, fig.height=3)
knitr::opts_knit$set(root.dir = '/Users/hm8/sanger/lymphocyteExpansionSequenceAnalysis/scripts/scripts_April2021/06_SV_analyses')
library(ggplot2)
library(reshape2)
library(data.table)
library(plyr)
library(dplyr)
# Read in brass results
brassfiltered = read.csv(file="../data/brass_ascat_curated.csv", stringsAsFactors = F, header=T)  # 1160   91
# load metadata
m3 = read.table("../data/colonyinfo_AX001_KX001_KX002_KX003_TX001_TX002_CB001.txt", header=T, stringsAsFactors = F, sep="\t")
# Include ASCAT results (only 12) and merge brass results with colony info
brassfiltered_m3 = merge(brassfiltered, m3, by.x="sample", by.y="colony") # 18 rows omitted (due to those colonies being omitted in final analysis) #  1142  102
hsc_deletion = subset(brassfiltered, colony=="PD43974ay")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(cache=TRUE, fig.path="./graphics/plot",autodep=TRUE,fig.width=6, fig.height=3)
knitr::opts_knit$set(root.dir = '/Users/hm8/sanger/lymphocyteExpansionSequenceAnalysis/scripts/scripts_April2021/06_SV_analyses')
library(ggplot2)
library(reshape2)
library(data.table)
library(plyr)
library(dplyr)
# Read in brass results
brassfiltered = read.csv(file="../data/brass_ascat_curated.csv", stringsAsFactors = F, header=T)  # 1160   91
# load metadata
m3 = read.table("../data/colonyinfo_AX001_KX001_KX002_KX003_TX001_TX002_CB001.txt", header=T, stringsAsFactors = F, sep="\t")
# Include ASCAT results (only 12) and merge brass results with colony info
brassfiltered_m3 = merge(brassfiltered, m3, by.x="sample", by.y="colony") # 18 rows omitted (due to those colonies being omitted in final analysis) #  1142  102
hsc_deletion = subset(brassfiltered, colony=="PD43974ay")
head(SVperColonyInfo)
mean(subset(SVperColonyInfo, Cell.type2 %in% c("Naive T","Naive B") )$n_nonVDJ_SV>0)
mean(subset(SVperColonyInfo, Cell.type2 %in% c("Memory T","Memory B") )$n_nonVDJ_SV>0)
summary(lm(n_nonVDJ_SV~Age , data=subset(SVperColonyInfo, Cell.type2 %in% c("Memory B","Memory T"))))
summary(lm(n_nonVDJ_SV~Age*Cell.type2 , data=SVperColonyInfo))
SVperColonyInfo_means = subset(SVperColonyInfo, Cell.type2 %in% c("Memory B","Memory T", "Naive B", "Naive T")) %>%
group_by(Age, Cell.type2) %>%
summarise(mean = mean(n_nonVDJ_SV))
ggplot(SVperColonyInfo_means, aes(y=mean, x=Age) )+
geom_point()+
facet_wrap(.~Cell.type2)
setwd("/Users/hm8/sanger/lymphocyteExpansionSequenceAnalysis/scripts/scripts_April2021/06_SV_analyses")
library(stringr)
library(magrittr)
library(rtracklayer)
library(BSgenome.Hsapiens.1000genomes.hs37d5)
library(cowplot)
library(dplyr)
## Reading in filtered data
myfiltered = read.table("../data/brassfiltered_all_July2019.txt", header=T, stringsAsFactors = F, sep="\t")
